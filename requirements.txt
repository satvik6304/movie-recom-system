{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPjlOSOHfQNcKQMR+RGtCfC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/satvik6304/movie-recom-system/blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "3gc9Y19fw545"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import ast\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "import pickle\n",
        "\n",
        "# Load Data\n",
        "movies = pd.read_csv('tmdb_5000_movies.csv')\n",
        "credits = pd.read_csv('tmdb_5000_credits.csv')\n",
        "\n",
        "# Merge on title\n",
        "movies = movies.merge(credits, on='title')\n",
        "\n",
        "# Keep useful columns\n",
        "movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]\n",
        "\n",
        "# Convert JSON-style strings to actual Python objects\n",
        "def convert(text):\n",
        "    return [i['name'] for i in ast.literal_eval(text)]\n",
        "\n",
        "movies.dropna(inplace=True)\n",
        "\n",
        "movies['genres'] = movies['genres'].apply(convert)\n",
        "movies['keywords'] = movies['keywords'].apply(convert)\n",
        "movies['cast'] = movies['cast'].apply(lambda x: [i['name'] for i in ast.literal_eval(x)[:3]])\n",
        "movies['crew'] = movies['crew'].apply(lambda x: [i['name'] for i in ast.literal_eval(x) if i['job']=='Director'])\n",
        "\n",
        "# Combine all features into one string\n",
        "movies['tags'] = movies['overview'] + movies['genres'].astype(str) + movies['keywords'].astype(str) + movies['cast'].astype(str) + movies['crew'].astype(str)\n",
        "movies['tags'] = movies['tags'].str.lower()\n",
        "\n",
        "# Vectorize\n",
        "cv = CountVectorizer(max_features=5000, stop_words='english')\n",
        "vectors = cv.fit_transform(movies['tags']).toarray()\n",
        "\n",
        "# Cosine Similarity\n",
        "similarity = cosine_similarity(vectors)\n",
        "\n",
        "# Save files\n",
        "pickle.dump(movies[['movie_id', 'title']], open('movies.pkl','wb'))\n",
        "pickle.dump(similarity, open('similarity.pkl','wb'))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Ye856B4tw9Cv"
      }
    }
  ]
}
